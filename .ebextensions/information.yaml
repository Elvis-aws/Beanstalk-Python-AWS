
aws:elbv2:listener:443:
  DefaultProcess: https
  ListenerEnabled: 'true'
  Protocol: HTTPS
  SSLCertificateArns: arn:aws:acm:us-east-2:123456789012:certificate/21324896-0fa4-412b-bf6f-f362d6eb6dd7
aws:elasticbeanstalk:environment:process:https:
  Port: '443'
  Protocol: HTTPS


# Batch size is the number of instances
# It deploys on each instance and calls it Batch 1, Batch 2 and Batch 3
# Then it does health check on the instance
# It the registers the batch to the auto-scalling group
# If an instance is unhealthy, it removes and replaces with a healthy instance

aws:autoscaling:updatepolicy:rollingupdate:
    MaxBatchSize: '5'
    MinInstancesInService: '2'
    PauseTime: null
    RollingUpdateEnabled: 'true'
    RollingUpdateType: Health
    Timeout: PT30M
#####################
# Rolling Deployments
#####################
# Elastic Beanstalk splits the environment’s EC2 instances into batches and deploys the new
#  version of the application on the existing instance one batch at a time, leaving the rest
#  of the instances in the environment running the old version.
# Elastic Beanstalk performs the rolling deployments as
    # When processing a batch, detaches all instances in the batch from the load balancer, deploys
    # the new application version, and then reattaches the instances.
    # To avoid any connection issues when the instances are detached, connection draining can be
    # enabled on the load balancer
    # After reattaching the instances in a batch to the load balancer, ELB waits until they pass
    # a minimum number of health checks
    # If a batch of instances does not become healthy within the command timeout, the deployment fails.
    # If the instances are terminated from the failed deployment, Elastic Beanstalk replaces them with
    # instances running the application version from the most recent successful deployment.
aws:elasticbeanstalk:command:
    BatchSize: '20'
    BatchSizeType: Percentage
    DeploymentPolicy: Rolling
    IgnoreHealthCheck: 'false'
    Timeout: '600'
###########################################
# Rolling with Additional Batch Deployments
###########################################
# Rolling with Additional Batch deployments is helpful when you need to maintain full capacity during
 # deployments.
# This deployment is similar to Rolling deployments, except they do not do an in-place deployment but
#  a disposable one, launching a new batch of instances prior to taking any instances out of service
# When the deployment completes, Elastic Beanstalk terminates the additional batch of instances.
# Rolling with additional batch deployment does not impact the capacity and ensures full capacity during
# the deployment process.
aws:elasticbeanstalk:command:
    BatchSize: '20'
    BatchSizeType: Percentage
    DeploymentPolicy: RollingWithAdditionalBatch
    IgnoreHealthCheck: 'false'
    Timeout: '600'
aws:elasticbeanstalk:container:python:
    NumProcesses: '1'
    NumThreads: '15'
#########################
# All at Once Deployments
#########################
# All at Once deployments perform an in-place deployment on all instances at the same time.
# All at Once deployments are simple and fast, however, it would lead to downtime and the
# rollback would take time in case of any issues.
aws:elasticbeanstalk:command:
    BatchSize: '20'
    BatchSizeType: Percentage
    DeploymentPolicy: AllAtOnce
    IgnoreHealthCheck: 'false'
    Timeout: '600'
###############################
# Immutable Deployments
###############################
# All at Once and Rolling deployment method updates existing instances.
# Immutable updates are performed by launching a second Auto Scaling group in the environment and the
# new version serves traffic alongside the old version until the new instances pass health checks.
# Immutable deployments can prevent issues caused by partially completed rolling deployments. If the new
# instances don’t pass health checks, Elastic Beanstalk terminates them, leaving the original instances
# untouched.
aws:elasticbeanstalk:command:
    BatchSize: '20'
    BatchSizeType: Percentage
    DeploymentPolicy: Immutable
    IgnoreHealthCheck: 'false'
    Timeout: '600'
###############################
# Traffic Splitting
###############################
# In a traffic-splitting deployment, Elastic Beanstalk launches a full set of new instances just like
# during an immutable deployment. It then forwards a specified percentage of incoming client traffic
# to the new application version for a specified evaluation period. If the new instances stay healthy,
# Elastic Beanstalk forwards all traffic to them and terminates the old ones. If the new instances
# don't pass health checks, or if you choose to abort the deployment, Elastic Beanstalk moves traffic
# back to the old instances and terminates the new ones.
aws:elasticbeanstalk:command:
    BatchSize: '20'
    BatchSizeType: Percentage
    DeploymentPolicy: TrafficSplitting
    IgnoreHealthCheck: 'false'
    Timeout: '600'
###############################
# Blue Green Deployments
###############################
# Elastic Beanstalk enables the Blue Green deployment through the Swap Environment URLs feature.
# Blue Green deployment provides an almost zero downtime solution, where a new version is deployed to a
# separate environment, and then CNAMEs of the two environments are swapped to redirect traffic to the
#  new version.
# Blue/green deployments require that the environment runs independently of the production database i.e.
# not maintained by Elastic Beanstalk if your application uses one. Because if the environment has an
# RDS DB instance attached to it, the data will not transfer over to the second environment and will be
# lost if the original environment is terminated
